name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        uv pip install --system -e ".[dev,http]"
        uv pip install --system pytest-cov pytest-xdist coverage[toml]
    
    - name: Run linting
      run: |
        uv run ruff check src/ examples/
        uv run black --check src/ tests/ examples/
    
    - name: Run type checking
      run: |
        uv run mypy src/berry_mcp/
    
    - name: Run tests with coverage
      run: |
        timeout 300 pytest tests/ --cov=berry_mcp --cov-report=xml --cov-report=term-missing -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        uv pip install --system -e ".[dev,http]"
    
    - name: Test server startup (stdio)
      run: |
        timeout 10s uv run python -m berry_mcp --help || true
    
    - name: Test tool registry functionality
      run: |
        uv run python -c "
        from berry_mcp import create_server
        from berry_mcp.tools.decorators import get_registered_tools
        
        # Create server which auto-discovers tools including PDF tools
        server = create_server()
        tools = get_registered_tools()
        
        # Filter for PDF tools
        pdf_tools = [tool for tool in tools if 'pdf' in tool['name'].lower() or 'pdf' in tool['description'].lower()]
        
        print(f'Loaded {len(tools)} total tools')
        print(f'PDF tools found: {len(pdf_tools)}')
        for tool in pdf_tools:
            print(f'  - {tool[\"name\"]}: {tool[\"description\"]}')
        
        assert len(pdf_tools) >= 2, f'Expected at least 2 PDF tools, got {len(pdf_tools)}'
        print('✅ PDF tools test passed!')
        "
    
    - name: Test FastMCP server functionality
      run: |
        echo "Testing FastMCP server functionality..."
        # Test that server can be created and tools can be loaded
        uv run python -c "
        from berry_mcp import create_server, FastMCP
        
        # Test server creation
        server = create_server(server_name='ci-test-server')
        print(f'✅ FastMCP server created: {server.name}')
        
        # Test that it's a proper FastMCP instance  
        assert isinstance(server, FastMCP), f'Expected FastMCP instance, got {type(server)}'
        print('✅ FastMCP instance validation passed!')
        "